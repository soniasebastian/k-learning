Docker vs Kubernetes

Docker is a container platform, interaction with container, provides container lifecycle.
Kubernetes is a container orchestration platform
Containers are ephemeral in nature (shortliving in nature, containers can die and ger revived in anytime)



Problems with Docker and why we are moving to Kubernetes

1. Single host
Container 1 is taking all resources and container 100 not able to live and dies...nature of docker is scoped to single host...

2. Autohealing
kills one container, Application running inside container is not accessible
Autohealing is a behaviour without users manual intervention
100 reasosn for a container can go down
Devops person cant monitor 10,000 containers
docker ps cannot be done for knowing all running containers

3. Autoscaling
A physical host/installed docker/one container/4GD RAM, 4CPU...maximum capacity for container of host
application have 10,000 users
during festival season from 10,000 to 1 lakh
eg: Netflix movies, load gets increased
to satisfy this we need to have a feature
Autoscaling 1 to 10
loadbalancing to be done..netflix.com


4. Enterprise
Docker is avery simple and minamalistic platform
Doesnot give enterprise level support


App should have a load balancer
Firewall
app has to autoscale
app has to have autohealing
app has to support API gateways


These are some Enterprise level standards


All these problems of Docker is solved by Kubernetes...Solutions are explained below


1.Resolving single host 
By deafult Kubernetes is a cluster..a group of nodes
Master/node architecture
container acually takes a lot memory
conatiner 1 is impactig container 99....kubernetes puts 99 in a diff node
faulty node impacting pods/apps, kubernetes puts it to diff node


2. Resolving autoscaling
Kubernetes cluster have Replica set/replication controller, we dont want to deploy another app
Kubernetes is basically dependent on Yaml file (yaml file is indentation file like json filereplication controller.yaml/ deployment.yaml file)

increase my replicas from 1 to 10
Kubernted support HPA, HORIZONTAL POD AUTOSCALING
when load goes above 80%, JUST SPIN UP ONE MORE CONTAINER


3. Autohealing
Kubernetes controls and fix the damage
Containers goes down due to many reasons
Autohealing, when container goes down or even before kubernetes creates one conatiner
API server when it receives signal that conatiner goes down, it will roll out a new container


4. Resolving enterprise 
Kubernetes ia a tool orginated form Google borg
a better solution
initial solution of Borg
Borg is not an open source 

People build Enterprise level container orchestration
Docker is a container platform, not used in production as its not enterprise level
Docker swarm is used
manage lifecycle of conatiner, dont have capabilities like whitelisting, autohealing, autoscaling, enterprise, firewall, blacklist some clients (denial of service )


whether kuberntes solve all these 100%?
NO

Virtual machines, external tools were easier


Kubernetes backed up by CNCF community ..contributors
Lots of enhancements'
projects..podman, prometheus
enahcncing tools of kubernetes
custom resource/ 
definitions

Kubernetes doesnt support advanced load balancing


Ingress controllers of kuberenets


Companies are migrating to kubernetes





